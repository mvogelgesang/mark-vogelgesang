---
import MaterialIcon from "./MaterialIcon.astro";
const { class: className, icon = "wb_sunny" } = Astro.props;
---

<div id="themeToggle" class:list={[className]} tabindex="0">
  <MaterialIcon id="theme" iconName={icon} />
</div>
<script is:inline>
  const darkIcon = "dark_mode";
  const lightIcon = "wb_sunny";

  function setLightMode(userInitiated = false) {
    document.querySelector("html").setAttribute("data-theme", "light");
    document.documentElement.classList.remove("dark");
    document.getElementById("theme").innerText = lightIcon;
    if (userInitiated) localStorage.setItem("theme", "light");
  }

  function setDarkMode(userInitiated = false) {
    document.querySelector("html").setAttribute("data-theme", "dark");
    document.documentElement.classList.add("dark");
    document.getElementById("theme").innerText = darkIcon;
    if (userInitiated) localStorage.setItem("theme", "dark");
  }

  const handleToggleClick = () => {
    let currentTheme = document.getElementById("theme");
    if (currentTheme.innerText === darkIcon) {
      setLightMode(true);
    } else {
      setDarkMode(true);
    }
  };

  const observer = new MutationObserver((mutations, obs) => {
    const docElement = document.documentElement;
    if (docElement) {
      enableTheme();
      obs.disconnect();
      return;
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true,
  });

  const enableTheme = () => {
    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      setDarkMode();
    } else {
      setLightMode();
    }

    document
      .getElementById("themeToggle")
      ?.addEventListener("click", handleToggleClick);
  };

  document.addEventListener("astro:page-load", enableTheme, { once: true });
  document.addEventListener("astro:after-swap", enableTheme);
</script>
